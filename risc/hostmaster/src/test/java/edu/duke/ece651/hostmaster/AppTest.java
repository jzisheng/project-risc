/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.hostmaster;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Iterator;

import org.junit.jupiter.api.Test;

class AppTest {

  
  public DigResult playOneTurn(Player p){
    Board b = p.getBoard();
    Coordinate inputCoord;
    do{
      inputCoord = p.readCoordinate();
    } while (!b.isValidCoordinate(inputCoord));

    Stash s = b.getStashAt(inputCoord);
    if(s==null){
      return new DigMissed();
    }
    return new DigHit(s);
  }

  @Test
  void test1() {
    Player testPlayer = mock(Player.class);
    Board testBoard = mock(Board.class);
    Coordinate coord = mock(Coordinate.class);

    when(testPlayer.readCoordinate()).thenReturn(coord);
    when(testPlayer.getBoard()).thenReturn(testBoard);

    when(testBoard.isValidCoordinate(coord )).thenReturn(true);

     // return a valid coordinate, and then return null stash
    when(testBoard.getStashAt(coord)).thenReturn(null);
    playOneTurn(testPlayer);
  }



  @Test
  void test2() {
    Player testPlayer = mock(Player.class);
    Board testBoard = mock(Board.class);
    Stash testStash = mock(Stash.class); 
    Coordinate coord = mock(Coordinate.class);

    when(testPlayer.readCoordinate()).thenReturn(coord);
    when(testPlayer.getBoard()).thenReturn(testBoard);

     // return a valid coordinate, and then return a NON null stash
    when(testBoard.isValidCoordinate(coord )).thenReturn(true);
    when(testBoard.getStashAt(coord )).thenReturn(testStash);

    playOneTurn(testPlayer);

  }

  @Test
  void test3() {
    Player testPlayer = mock(Player.class);
    Board testBoard = mock(Board.class);
    Stash testStash = mock(Stash.class); 
    Coordinate coord = mock(Coordinate.class);
    
    when(testPlayer.readCoordinate()).thenReturn(coord);
    when(testPlayer.getBoard()).thenReturn(testBoard);    
    // first return false, and then return true
    when(testBoard.isValidCoordinate(coord)).thenReturn(false).thenReturn(true);
    when(testBoard.getStashAt(coord)).thenReturn(testStash);
    playOneTurn(testPlayer);
  }
  
}
